#!/usr/bin/python

"""
This program renames/moves files generated by SerialEM.

Rijksuniversiteit Groningen, 2020
C.M. Punter (c.m.punter@rug.nl)
J.S.H.C.U. Rheinberger (j.s.h.c.u.rheinberger@rug.nl)
"""
import argparse
import os
import time
import re
import shutil

pattern = re.compile("^(.*)(\_X[\+-]\dY[\+-]\d-0)(\.mrc|\.tif)$")

coordinate_suffix = {
  '_X-1Y-1-0': '_1',
  '_X+0Y-1-0': '_2',
  '_X+1Y-1-0': '_3',
  '_X+1Y+0-0': '_4',
  '_X+0Y+0-0': '_5',
  '_X-1Y+0-0': '_6',
  '_X-1Y+1-0': '_7',
  '_X+0Y+1-0': '_8',
  '_X+1Y+1-0': '_9',
}

parser = argparse.ArgumentParser(description="Rename/move mrc files that are generated by SerialEM", formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument("source", help="source directory")
parser.add_argument("destination", help="destination directory")
parser.add_argument("--time", type=int, help="number of minutes a file should be untouched before renaming/moving", default=2)
parser.add_argument("--dry-run", action="store_const", const=True, help="dry run; no renaming/copying will occur")
parser.add_argument("-c", "--copy", action="store_const", const=True, help="files are copied instead of moved")
parser.add_argument("-s", "--super-resolution", action="store_const", const=True, help="run alterheader on mrc files after renaming/moving")
parser.add_argument("-m", "--mdoc", action="store_const", const=True, help="also rename mdoc files")
args = parser.parse_args()

for filename in os.listdir(args.source):
  
  match = pattern.match(filename)
  
  if match:
    prefix = match.group(1)
    coordinate = match.group(2)
    extension = match.group(3)

    if coordinate in coordinate_suffix:
      
      time_last_modified = os.path.getmtime(os.path.join(args.source, filename))
      time_since = (time.time() - time_last_modified) / 60 # in minutes

      #print(filename, prefix, coordinate, extension)

      if time_since > args.time:
        old_path = os.path.join(args.source, filename)
        new_path = os.path.join(args.destination, prefix + coordinate_suffix[coordinate] + extension)
  
        print("%s --> %s" % (old_path, new_path))
        
        if not args.dry_run:
          if args.copy:
            shutil.copy2(old_path, new_path)

            if args.mdoc:
              shutil.copy2(old_path + ".mdoc", new_path + ".mdoc")
          else:
            shutil.move(old_path, new_path)

            if args.mdoc:
              shutil.move(old_path + ".mdoc", new_path + ".mdoc")

          if args.super_resolution and not new_path.endswith(".tif"):
            os.system("alterheader %s -4bit 1" % new_path)


